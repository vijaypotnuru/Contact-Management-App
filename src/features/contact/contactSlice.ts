// Import necessary functions and types from Redux Toolkit
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the interface for the Contact object
interface Contact {
    id: string;
    firstName: string;
    lastName: string;
    status: string;
}

// Define the interface for the ContactState, which will hold the contacts array
interface ContactState {
    contacts: Contact[];
}

// Attempt to retrieve contacts data from local storage
const contactsData = localStorage.getItem('contactsData');

let initialState: ContactState; // Declare initialState before the if statement

// Check if contactsData exists in local storage
if (contactsData) {
    // If data exists, parse it and set it as the initial state
    const contacts: Contact[] = JSON.parse(contactsData);
    initialState = {
        contacts: contacts,
    };
} else {
    // If no data, set an empty array as the initial state
    initialState = {
        contacts: [],
    };
}

// Create a Redux slice using createSlice
export const contactSlice = createSlice({
    name: 'contact', // The name of the slice
    initialState,    // The initial state defined above
    reducers: {
        // Add a new contact to the state using the addContact reducer
        addContact: (state, action: PayloadAction<Contact>) => {
            const { id, firstName, lastName, status } = action.payload;

            // Create a new Contact object
            const newContact: Contact = {
                id,
                firstName,
                lastName,
                status,
            };

            // Update state with the new contact and save to local storage
            const updatedContacts = [...state.contacts, newContact];
            localStorage.setItem('contactsData', JSON.stringify(updatedContacts));
            state.contacts = updatedContacts; // Update state's contacts array
        },

        // Delete a contact from the state using the deleteContact reducer
        deleteContact: (state, action: PayloadAction<string>) => {
            const id = action.payload;

            // Filter out the contact with the specified ID from the contacts array
            const updatedContacts = state.contacts.filter(contact => contact.id !== id);
            localStorage.setItem('contactsData', JSON.stringify(updatedContacts));
            state.contacts = updatedContacts; // Update state's contacts array
        },

        // Update an existing contact using the updateContact reducer
        updateContact: (state, action: PayloadAction<Contact>) => {
            const { id, firstName, lastName, status } = action.payload;

            // Create an updated Contact object
            const updatedContact: Contact = {
                id,
                firstName,
                lastName,
                status,
            };

            // Map through the contacts array and update the specific contact
            const updatedContacts = state.contacts.map(contact => contact.id === id ? updatedContact : contact);
            localStorage.setItem('contactsData', JSON.stringify(updatedContacts));
            state.contacts = updatedContacts; // Update state's contacts array
        },
    },
});

// Export the action creators addContact, deleteContact, and updateContact
export const { addContact, deleteContact, updateContact } = contactSlice.actions;

// Export the reducer function generated by the slice
export default contactSlice.reducer;
