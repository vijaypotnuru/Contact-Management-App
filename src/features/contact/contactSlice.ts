// Imported necessary functions and types from Redux Toolkit
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Defined the interface for the Contact object
interface Contact {
    id: string;
    firstName: string;
    lastName: string;
    status: string;
}

// Defined the interface for the state containing an array of Contact objects
interface ContactState {
    contacts: Contact[];
}

// Set the initial state with an empty array of contacts
const initialState: ContactState = {  // Specifying the type for initialState
    contacts: [],
}

// Created a Redux slice using createSlice
export const contactSlice = createSlice({
    name: 'contact', // The name of the slice
    initialState,    // The initial state defined above
    reducers: {
        // Add a new contact to the state using the addContact reducer
        addContact: (state, action: PayloadAction<Contact>) => {
            // Destructure properties from the action payload
            const { id, firstName, lastName, status } = action.payload;

            // Create a new Contact object
            const newContact: Contact = {
                id,
                firstName,
                lastName,
                status
            };

            // Push the new contact into the contacts array in the state
            state.contacts.push(newContact);
        },

        // Delete a contact from the state using the deleteContact reducer
        deleteContact: (state, action: PayloadAction<string>) => {
            const id = action.payload;
            // Filter out the contact with the specified ID from the contacts array
            state.contacts = state.contacts.filter(contact => contact.id !== id);

        },
        updateContact: (state, action: PayloadAction<Contact>) => {
            const { id, firstName, lastName, status } = action.payload;
            const updateContact: Contact = {
                id,
                firstName,
                lastName,
                status
            }
            state.contacts = state.contacts.map(contact => contact.id === id ? updateContact : contact);

        }
    }
});

// Export the addContact, deleteContact and updateContact action creator
export const { addContact, deleteContact, updateContact} = contactSlice.actions;

// Export the reducer function generated by the slice
export default contactSlice.reducer;
